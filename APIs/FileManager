 --[[ Author: Encreedem
Extends the fs library by providing functions to save and load tables in
different formats.
Currently supported file types:
- serialized:	Format used by "textutils.serialized()".
- cfg (config):	Simple config-format. Each line contains [key]=[value].
 ]]
 
 -- Classes
 
 -- Contains all supported file types and the functions to convert them.
 local FileTypes = {
	-- Format used by "textutils.serialized()".
	serialized = {
		-- Converts the given table into a serialized string and returns it.
		convertToFile = function(toConvert)
			assert(type(toConvert) == "table")
			return textutils.serialize(toConvert)
		end;
		
		-- Converts the given string into a talbe and returns it.
		convertToTable = function(toConvert)
			assert(type(toConvert) == "string")
			return textutils.unserialize(toConvert)
		end;
	};
	
	-- Simple config-format. Each line contains [key]=[value].
	cfg = {
		convertToFile = function(toConvert)
			assert(type(toConvert) == "table")
			
			local fileText = ""
			local delimiter = ""
			
			for key, value in pairs(toConvert) do
				local line = tostring(key) .. "=" .. tostring(value)
				fileText = fileText .. delimiter .. line
				delimiter = "\n"
			end
			
			return fileText
		end;
		
		convertToTable = function(toConvert)
			assert(type(toConvert) == "string")
			local ret = {}
			
			for _, line in pairs(enCore.stringToLines(toConvert)) do
				local key, value = string.match(line, "([^=]+)=(.+)")
				ret[key] = value
			end
			
			return ret;
		end;
	};
 }
 
-- Functions

-- Adds the given text to the specified file.
function append(path, text)
	path = getPathString(path)
	local mode = "a"
	
	-- Validation
	if fs.exists(path) and fs.isDir(path) then
		error("Cannot append text to \"" .. path .. "\" because it is a folder!")
	end
	
	if not isValidFile(path) then mode = "w" end
	
	-- Code
	local file = fs.open(path, mode)
	file.write(text)
	file.close()
end

-- Clears the content of the given file.
function clearFile(path)
	path = getPathString(path)
	
	if isValidFile(path) then
		local file = fs.open(path, "w")
		file.close()
	end
end

-- Creates the given file but doesn't return its handle.
function createFile(path)
	path = getPathString(path)
	
	if not fs.exists(path) then
		local file = fs.open(path, "w")
		file.close()
	end
end

-- Returns a table of strings, containing all files with the specified extension.
function findByExtension(parentFolder, extension)
	assert(fs.exists(parentFolder))
	assert(fs.isDir(parentFolder))
	extension = toExtension(extension)
	
	local ret = {}
	
	for _, value in pairs(fs.list(parentFolder)) do
		local fileName = string.match(value, "^(.+)%" .. extension)
		
		if (fileName) then
			ret[#ret+1] = fileName
		end
	end
	
	return ret
end

-- Returns whether the path refers to an existing folder.
function isValidDir(path)
	path = getPathString(path)
	assert(type(path) == "string")
	return (fs.exists(path) and fs.isDir(path))
end

-- Returns whether the path refers to an existing file.
function isValidFile(path)
	path = getPathString(path)
	assert(type(path) == "string")
	return (fs.exists(path) and not fs.isDir(path))
end

-- Opens the specified file and returns its content as a string.
function loadFile(path)
	assert(fs.exists(path) and not fs.isDir(path))
	local file = fs.open(path, "r")
	local fileText = file.readAll()
	file.close()
	
	return fileText
end

--[[ Reads and unpacks one or multiple files into a table and returns it.
[string or table] path: The path to the file (or its parent folder if 
	loadByExtension" is specified)
[string] [optional] fileType: The type of the file. See "supported file types"
	in the header for more info. Uses "serialized" if empty.
[boolean] [optional] loadByExtension: If specified then it loads all files
	with the specified extension and returns them in a single table.

e.g. loadTable("DoorLock/Users", "serialized", "user")
... loads all files in the "DoorLock/Users" folder with the extension ".user"
and returns them as a single table.
]]
function loadTable(path, fileType, loadByExtension)
	-- Validation
	if type(path) == "table" then
		path = getPathString(path)
	end
	
	assert(fs.exists(path), "File \"" .. tostring(path) .. "\" doesn't exist.")
	
	if enCore.stringEmpty(fileType) then
		fileType = "serialized"
	end
	assert(fileTypeValid(fileType))
	if loadByExtension then
		assert(fs.isDir(path))
	else
		assert(not fs.isDir(path))
	end
	
	-- Code
	local ret = {}
	
	if loadByExtension then
		local fileList = findByExtension(path, loadByExtension)
		
		for _, value in pairs(fileList) do
			local filePath = fs.combine(path, value)
			local fileText = loadFile(filePath)
			ret[value] = FileTypes[fileType].convertToTable(fileText)
		end
	else
		local fileText = loadFile(path)
		ret = FileTypes[fileType].convertToTable(fileText)
	end
	
	return ret
end

-- Removes the given file.
function deleteFile(path)
	path = getPathString(path)
	fs.delete(path)
end

-- Renames the given file.
-- "newName" only needs the new name, not the whole path.
function renameFile(path, newName)
	path = getPathString(path)
	assert(type(newName) == "string")
	assert(isValidFile(path))
	
	local newPath = fs.combine(fs.getDir(path), newName)
	fs.move(path, newPath)
end

-- Saves the given file into the specified path.
function saveFile(path, text)
	local file = fs.open(path, "w")
	file.write(text)
	file.close()
end

--[[ Saves the specified table into one or multiple files.
[table] tableToSave: The table that should be saved.
[string or table] path: The path including the name of the file (or folder if "saveByExtension" is specified.
[string] [optional] fileType: The file type that specifies how the file will be formatted.
[boolean] [optional] saveByExtension:
	true: Each element will be saved into it's own file with the specified extension.
		"path" is the folder where the files should be saved.
	false or nil: The table will be  saved into a single file.
		"path" is the name of the file.
]]
function saveTable(tableToSave, path, fileType, saveByExtension)
	-- Validation
	if type(path) == "table" then
		path = getPathString(path)
	end
	
	fileType = enCore.stringEmpty(fileType) and "serialized" or string.lower(fileType)
	assert(fileTypeValid(fileType))
	
	-- If "saveByExtension" is not nil then "path" has to be a folder.
	assert((saveByExtension and fs.isDir(path)) or not fs.isDir(path))
	
	-- Code
	if saveByExtension then
		for key, value in pairs(tableToSave) do
			local filePath = fs.combine(path, key .. toExtension(saveByExtension))
			local fileText = FileTypes[fileType].convertToFile(value)
			saveFile(filePath, fileText)
		end
	else
		local fileText = FileTypes[fileType].convertToFile(tableToSave)
		saveFile(path, fileText)
	end
end

-- "Private" Functions

-- Returns whether the specified file type is supported by the FileManager.
function fileTypeValid(fileType)
	assert(type(fileType) == "string")
	
	for key, value in pairs(FileTypes) do
		if (fileType == key) then return true end
	end
	
	return false
end

-- Takes a table of strings and combines it into a path string.
function getPathString(pathTable)
	if (type(pathTable) == "string") then return pathTable end
	
	assert(type(pathTable) == "table")
	
	local ret = ""
	
	for _, value in pairs(pathTable) do
		ret = fs.combine(ret, value)
	end
	
	return ret
end

-- Adds "." to the beginning of the string (unless it's already there) and returns it.
function toExtension(str)
	if (string.char(str) ~= '.') then
		str = "." .. str
	end
	
	return str
end